# Copy this file to "build" and change some of the values to suit your system.

SIGNAL_LIB = $$_PRO_FILE_PWD_/Alenka-Signal
FILE_LIB = $$_PRO_FILE_PWD_/Alenka-File

INCLUDEPATH += \
	$$FILE_LIB/boost \
	$$FILE_LIB/pugixml/src \ # Note that pugixml code is linked via Alenka-File.
	$$SIGNAL_LIB/eigen

SOURCES += $$files($$FILE_LIB/boost/libs/program_options/src/*.cpp)

CONFIG(debug, debug|release) {
	DEFINES += TESTS

	contains(QMAKE_HOST.arch, x86_64) {
		SIGNAL_LIB = $$SIGNAL_LIB/build-Debug-64/install-dir
		FILE_LIB = $$FILE_LIB/build-Debug-64/install-dir
	} else {
		SIGNAL_LIB = $$SIGNAL_LIB/build-Debug-32/install-dir
		FILE_LIB = $$FILE_LIB/build-Debug-32/install-dir
	}
} else {
	DEFINES += NDEBUG

	contains(QMAKE_HOST.arch, x86_64) {
		SIGNAL_LIB = $$SIGNAL_LIB/build-Release-64/install-dir
		FILE_LIB = $$FILE_LIB/build-Release-64/install-dir
	} else {
		SIGNAL_LIB = $$SIGNAL_LIB/build-Release-32/install-dir
		FILE_LIB = $$FILE_LIB/build-Release-32/install-dir
	}
}

INCLUDEPATH += $$SIGNAL_LIB/include $$FILE_LIB/include

DEFINES += \
	CL_USE_DEPRECATED_OPENCL_1_2_APIS \ # This is to silence some warnings.

LIBS += \
	-L$$SIGNAL_LIB/lib \
	-L$$FILE_LIB/lib \
	-lOpenCL \
	-lalenka-signal \
	-lalenka-file \
	-lclFFT \
	-lGDF \
	-lpugixml

unix {
	LIBS += \
		/usr/lib/gcc/x86_64-linux-gnu/5/libstdc++.a \
		/usr/lib/gcc/x86_64-linux-gnu/5/libgomp.a \
		-ldl

	DEFINES += UNIX_BUILD

	QMAKE_CXXFLAGS += -pedantic -Wall -fopenmp
	QMAKE_LFLAGS += -fopenmp

	QMAKE_CXXFLAGS_DEBUG += -O0 -D_GLIBCXX_DEBUG
	QMAKE_LFLAGS_DEBUG += -O0

	QMAKE_CXXFLAGS_RELEASE += -O3
	QMAKE_LFLAGS_RELEASE += -O3
}

win32 {
	#OPENCL_DIR = C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v8.0
	OPENCL_DIR = C:/Program Files (x86)/AMD APP SDK/3.0

	contains(QMAKE_HOST.arch, x86_64) {
		LIBS += -L"$$OPENCL_DIR"/lib/x86_64 # This is where OpenCL.lib is.
	} else {
		LIBS += -L"$$OPENCL_DIR"/lib/x86
	}

	LIBS += -lopengl32

	INCLUDEPATH += "$$OPENCL_DIR"/include

	DEFINES += WIN_BUILD _USE_MATH_DEFINES _CRT_SECURE_NO_WARNINGS \
		BOOST_PROGRAM_OPTIONS_NO_LIB # This stops Microsoft's linker from needing the static library.

	QMAKE_CXXFLAGS += -openmp

	CONFIG += console
}
